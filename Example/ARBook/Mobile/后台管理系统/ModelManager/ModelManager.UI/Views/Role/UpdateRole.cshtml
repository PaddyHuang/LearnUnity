@model  ModelManager.Domain.ViewModel.ServerResponse.RBAC.RoleResponseModel
@{
    ViewBag.Title = "添加用户角色信息";
    Layout = "~/Views/Shared/IframLayout.cshtml";
}
@section styles{

    @*<link href="~/Content/zTree_v3/css/demo.css" rel="stylesheet" />*@
    <link href="https://cdn.bootcss.com/zTree.v3/3.5.29/css/zTreeStyle/zTreeStyle.min.css" rel="stylesheet">
    <link href="https://cdn.bootcss.com/zTree.v3/3.5.29/css/metroStyle/metroStyle.min.css" rel="stylesheet">
    @*<link href="~/Content/zTree_v3/css/metroStyle/metroStyle.css" rel="stylesheet" />*@

    <style type="text/css">
        ul.ztree {
            margin-top: 10px;
            border: 1px solid #617775;
            background: #f0f6e4;
            /*width: 220px;*/
            min-height: 360px;
            overflow-y: scroll;
            overflow-x: auto;
        }

        .ztree li span.button.add {
            margin-left: 2px;
            margin-right: -1px;
            background-position: -144px 0;
            vertical-align: top;
            *vertical-align: middle;
        }

        .layui-tab-content {
            min-height: 240px;
        }
    </style>

}

@*<fieldset class="layui-elem-field layui-field-title" style="margin-top: 30px;">
        <legend>默认风格的Tab</legend>
    </fieldset>*@
<form class="layui-form" method="post" id="form" action="">
    <div class="layui-tab layui-tab-card">
        <ul class="layui-tab-title">
            <li class="layui-this">添加、修改角色</li>
            <li>用户管理</li>
            <li>权限分配</li>
        </ul>

        <div class="layui-tab-content">
            <div class="layui-tab-item layui-show">
                <div class="layui-form-item">
                    <label class="layui-form-label">角色名称</label>
                    <div class="layui-input-block">
                        <input type="text" name="name" lay-verify="required" autocomplete="off" placeholder="用户名" class="layui-input" value="@Model.Role.NAME">
                        <input type="hidden" id="ID" name="ID" value="@Model.Role.ID"  />
                        @Html.AntiForgeryToken()
                    </div>
                </div>






            </div>
            <div class="layui-tab-item">分配用户</div>
            <div class="layui-tab-item">
                <div class="layui-form-item">
                    <label class="layui-form-label">权限分配</label>
                    <div class="la"></div>

                    <ul id="treeDemo" class="ztree"></ul>
                </div>

            </div>

        </div>
        <div class="layui-form-item">
            <label class="layui-form-label"></label>
            <div class="layui-input-block">
                <button class="layui-btn" lay-submit="" lay-filter="productadd">保存并提交</button>
                <button class="layui-btn" lay-submit="" lay-filter="productsave">保存草稿</button>
                <button type="reset" class="layui-btn layui-btn-primary">重置</button>
            </div>
        </div>
    </div>
</form>

@section scripts{

    @*<script src="~/Content/layui/extension/js/begtable.js"></script>*@
    <script src="https://cdn.bootcss.com/jquery/1.12.0/jquery.min.js"></script>
    @*<script src="https://cdn.bootcss.com/zTree.v3/3.5.29/js/jquery.ztree.all.min.js"></script>*@
    <script src="https://cdn.bootcss.com/zTree.v3/3.5.29/js/jquery.ztree.core.js"></script>
    <script src="https://cdn.bootcss.com/zTree.v3/3.5.29/js/jquery.ztree.excheck.js"></script>



    <script>
        layui.config({
            base: '../../Content/layui/extension/js/',
            v: new Date().getTime()
        }).use(['form', 'layedit', 'element', 'laydate', 'common', 'upload'], function () {

            var form = layui.form
                ,$ = layui.jquery
                ,layer = layui.layer
                ,layedit = layui.layedit
                ,laydate = layui.laydate
                ,common = layui.common
                ,element = layui.element
                ,upload = layui.upload;

            var setting = {
                check: {
                    enable: true,
                    chkStyle: "checkbox",
                    chkboxType: { "Y": "ps", "N": "ps" }
                },
                view: {
                    dblClickExpand: false
                },
                data: {
                    simpleData: {
                        enable: true,
                        open: "Open",
                        checked: "Checked"
                    }
                },
                callback: {
                  //  onClick: onClick,
                  //  onCheck: onCheck
                }
            };





            //触发事件
            var active = {
                tabAdd: function () {
                    //新增一个Tab项
                    element.tabAdd('demo', {
                        title: '新选项' + (Math.random() * 1000 | 0) //用于演示
                      , content: '内容' + (Math.random() * 1000 | 0)
                      , id: new Date().getTime() //实际使用一般是规定好的id，这里以时间戳模拟下
                    })
                }
              , tabDelete: function (othis) {
                  //删除指定Tab项
                  element.tabDelete('demo', '44'); //删除：“商品管理”


                  othis.addClass('layui-btn-disabled');
              }
              , tabChange: function () {
                  //切换到指定Tab项
                  element.tabChange('demo', '22'); //切换到：用户管理
              }
            };

            $('.site-demo-active').on('click', function () {
                var othis = $(this), type = othis.data('type');
                active[type] ? active[type].call(this, othis) : '';
            });

            //Hash地址的定位
            var layid = location.hash.replace(/^#test=/, '');
            element.tabChange('test', layid);

            element.on('tab(test)', function (elem) {
                location.hash = 'test=' + $(this).attr('lay-id');
            });


            $(function () {


                $.ajax({
                    type: "POST",
                    url: common.renderUrl('@Url.Action("GetMenuTree", "Menu")', {
                        
                        roleID:'@Model.Role.ID'

                    }),
                    // async: false, //_config.async,
                    dataType: 'json',
                    beforeSend: function () {
                        layer.load(0);
                    },
                    success: function (result, status, xhr) {

                        // $.fn.zTree.init($("#treeDemo"), setting, result.Result);
                        $.fn.zTree.init($("#treeDemo"), setting, result.Result);
                        //  $("#selectAll").bind("click", selectAll);
                    },
                    error: function (xhr, status, error) {

                        layer.closeAll("loading");
                        common.msgError('treeDemo error:' + error);
                    },
                    complete: function (xhr, status) {
                        layer.closeAll("loading");
                    }
                });
            })

            form.verify({
                username: function (value, item) { //value：表单的值、item：表单的DOM对象
                    if (!new RegExp("^[a-zA-Z0-9_\u4e00-\u9fa5\\s·]+$").test(value)) {
                        return '用户名不能有特殊字符';
                    }
                    if (/(^\_)|(\__)|(\_+$)/.test(value)) {
                        return '用户名首尾不能出现下划线\'_\'';
                    }
                    if (/^\d+\d+\d$/.test(value)) {
                        return '用户名不能全为数字';
                    }
                }
                //我们既支持上述函数式的方式，也支持下述数组的形式
                //数组的两个值分别代表：[正则匹配、匹配不符时的提示文字]
                  , pass: [
                    /^[\S]{6,12}$/
                    , '密码必须6到12位，且不能出现空格'
                  ]
                   , template: function (value,item) {
                       if (!value || value.length == 0)
                       {
                           return '模板信息，不能为空'
                       }
                   }
            });


            //监听提交
            form.on('submit(productadd)', function (data) {
                var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                var nodes = zTree.getCheckedNodes(true);
                var len = nodes.length;


                //分配菜单
                var menuid = "";

                for (var i = 0; i < len ; i++)
                {
                    if (i == len - 1) {
                        menuid += nodes[i].id;
                    }

                    else
                    {
                        menuid += nodes[i].id + ","
                    }
                }
                data.field.menuid = menuid;
                $(this).text()
                $.ajax({
                    type: "POST",
                    url: common.renderUrl('@Url.Action("UpdateRole", "Role")', {

                    }),
                    data: data.field,
                    dataType: "json",
                    beforeSend: function (xhr) {
                        layer.load();
                        //  xhr.setRequestHeader('Content-Type', 'multipart/form-data');
                    },
                    success: function (res) {
                        if (res.Code == 0) {
                            layer.msg("添加成功，用户初始密码为123456");
                        }
                        else {
                            layer.msg(res.ErrorDesc);
                        }
                        layer.closeAll();
                    },

                    error: function (xmlHttpRequest, textStatus, errorThrown) {

                        layer.closeAll();
                    }
                });


                return false;


                title: '最终的提交信息'




            });



        });


    </script>


}

