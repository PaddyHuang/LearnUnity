@model ModelManager.Domain.Entitys.Category

@{
    ViewBag.Title = "AddCategory";
    Layout = "~/Views/Shared/IframLayout.cshtml";
}

@section styles{

    @*<link href="~/Content/zTree_v3/css/demo.css" rel="stylesheet" />*@
    <link href="https://cdn.bootcss.com/zTree.v3/3.5.29/css/zTreeStyle/zTreeStyle.min.css" rel="stylesheet">
    <link href="https://cdn.bootcss.com/zTree.v3/3.5.29/css/metroStyle/metroStyle.min.css" rel="stylesheet">
    @*<link href="~/Content/zTree_v3/css/metroStyle/metroStyle.css" rel="stylesheet" />*@
    <style type="text/css">
        ul.ztree {
            margin-top: 10px;
            border: 1px solid #617775;
            background: #f0f6e4;
            /*width: 220px;*/
            min-height: 360px;
            overflow-y: scroll;
            overflow-x: auto;
        }

        .ztree li span.button.add {
            margin-left: 2px;
            margin-right: -1px;
            background-position: -144px 0;
            vertical-align: top;
            *vertical-align: middle;
        }
    </style>
}
<div style="margin: 15px;">
    <form class="layui-form" method="post" id="form" action="">
        <div class="layui-form-item">
            <label class="layui-form-label">目录名称</label>
            <div class="layui-input-block">
                <input type="text" name="name" lay-verify="required" autocomplete="off" placeholder="目录名称" class="layui-input" value="@Model.Name">
                <input type="hidden" id="ID" name="ID" value="@Model.ID" />
                @Html.AntiForgeryToken()
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">上级目录</label>
            <div class="la"></div>
            <input type="hidden" id="parentID" name="parentID" value="" />
            <ul id="treeDemo" class="ztree"></ul>
        </div>

        <div class="layui-form-item">
            <div class="layui-inline">
                <label class="layui-form-label">目录序号</label>
                <div class="layui-input-inline">
                    <input type="text" name="cateNum" lay-verify="required" autocomplete="off" class="layui-input" value="@Model.CateNum">
                </div>
            </div>
            <div class="layui-inline">
                <label class="layui-form-label">所属行业</label>
                <div class="layui-input-inline">
                    <input type="text" name="cateType" autocomplete="off" class="layui-input" value="@Model.CateType">
                </div>
            </div>
        </div>

        <div class="layui-form-item">
            <div class="layui-inline">
                <label class="layui-form-label">书籍名称</label>
                <div class="layui-input-inline">
                    <input type="text" name="book" autocomplete="off" class="layui-input" value="@Model.Book">
                </div>
            </div>
            <div class="layui-inline">
                <label class="layui-form-label">关键字</label>
                <div class="layui-input-inline">
                    <input type="text" name="keyword" autocomplete="off" class="layui-input" value="@Model.Keywords">
                </div>
            </div>
        </div>
        <div class="layui-form-item">
            <div class="layui-inline">
                <label class="layui-form-label">目录层级</label>
                <div class="layui-input-inline">
                    @{
                        var list = ViewData["ddlLevelCode"] as List<SelectListItem>;
                    }

                    @if (list != null)
                    {
                        <select name="level" lay-filter="aihao">
                            @foreach (var item in list)
                            {


                                if (Model.Level.ToString().Equals(item.Value))
                                {
                                     <option value="@item.Value" selected>@item.Text</option>
                                }
                                
                                else
                                {
                                     <option value="@item.Value">@item.Text</option>
                                }
                                
                                
                            }

                        </select>
                    }
                </div>
            </div>
        </div>


        <div class="layui-form-item">
            <label class="layui-form-label"></label>
            <div class="layui-input-block">
                <div class="layui-btn" lay-submit="" lay-filter="cateadd">保存并提交</div>
                <button class="layui-btn" lay-submit="" lay-filter="productsave">保存草稿</button>
                <button type="reset" class="layui-btn layui-btn-primary">重置</button>
            </div>
        </div>
    </form>
</div>
@section scripts{

    @*<script src="~/Content/layui/extension/js/begtable.js"></script>*@
    <script src="https://cdn.bootcss.com/jquery/1.12.0/jquery.min.js"></script>
    <script src="https://cdn.bootcss.com/zTree.v3/3.5.29/js/jquery.ztree.all.min.js"></script>


    <script>
        layui.config({
            base: '../../Content/layui/extension/js/',
            v: new Date().getTime()
        }).use(['form', 'layedit', 'laydate', 'common', 'upload'], function () {

            var form = layui.form
                , $ = layui.jquery
                , layer = layui.layer
                , layedit = layui.layedit
                , laydate = layui.laydate
                , common = layui.common
                , upload = layui.upload;


            var code;

            function setCheck() {
                var zTree = $.fn.zTree.getZTreeObj("treeDemo"),
                type = { "Y": "ps", "N": "ps" };
                zTree.setting.check.chkboxType = type;
                //showCode('setting.check.chkboxType = { "Y" : "ps", "N" : "pd" };');
            }
            function showCode(str) {
                if (!code) code = $("#code");
                code.empty();
                code.append("<li>" + str + "</li>");
            }

            var setting = {
                check: {
                    enable: true,
                    chkStyle: "radio",
                    radioType: "all"
                },
                data: {
                    key: {
                        checked: "Checked"
                    },
                    simpleData: {
                        enable: true,
                        open: "Open",
                        checked: "Checked"
                    }

                },
                callback: {
                    onCheck: zTreeOnCheck
                  //  onClick: zTreeOnClick
                }
            };
            var zNodes = [
                { id: 1, pId: 0, name: "随意勾选 1", open: true },
                { id: 11, pId: 1, name: "随意勾选 1-1", open: true },
                { id: 111, pId: 11, name: "随意勾选 1-1-1" },
                { id: 112, pId: 11, name: "随意勾选 1-1-2" },
                { id: 12, pId: 1, name: "随意勾选 1-2", open: true },
                { id: 121, pId: 12, name: "随意勾选 1-2-1" },
                { id: 122, pId: 12, name: "随意勾选 1-2-2" },
                { id: 2, pId: 0, name: "随意勾选 2", checked: true, open: true },
                { id: 21, pId: 2, name: "随意勾选 2-1" },
                { id: 22, pId: 2, name: "随意勾选 2-2", open: true },
                { id: 221, pId: 22, name: "随意勾选 2-2-1", checked: true },
                { id: 222, pId: 22, name: "随意勾选 2-2-2" },
                { id: 23, pId: 2, name: "随意勾选 2-3" }
            ];
            var code;
            function setCheck() {
                var zTree = $.fn.zTree.getZTreeObj("treeDemo"),
                type = { "Y": "ps", "N": "ps" };
                zTree.setting.check.chkboxType = type;
                //showCode('setting.check.chkboxType = { "Y" : "ps", "N" : "pd" };');
            }
            function showCode(str) {
                if (!code) code = $("#code");
                code.empty();
                code.append("<li>" + str + "</li>");
            }

            function zTreeOnCheck(event, treeId, treeNode) {


                if (treeNode.Checked) {
                    $("#parentID").val(treeNode.id);
                }
                else
                {
                   // layer.msg("去勾选");
                }

              
            };

            function selectAll() {
                var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                zTree.setting.edit.editNameSelectAll = $("#selectAll").attr("checked");
            }

            $(function () {

                $.ajax({
                    type: "POST",
                    url: common.renderUrl('@Url.Action("GetList", "Category")', {
                        id:'@Model.ID'

                    }),
                    // async: false, //_config.async,
                    dataType: 'json',
                    beforeSend: function () {
                        layer.load(0);
                    },
                    success: function (result, status, xhr) {
                       // console.log(JSON.stringify(result.Result));
                        // $.fn.zTree.init($("#treeDemo"), setting, result.Result);
                        $.fn.zTree.init($("#treeDemo"), setting, result.Result);
                        $("#selectAll").bind("click", selectAll);
                    },
                    error: function (xhr, status, error) {

                        layer.closeAll("loading");
                        common.msgError('treeDemo error:' + error);
                    },
                    complete: function (xhr, status) {
                        layer.closeAll("loading");
                    }
                });

            })











            form.verify({
                username: function (value, item) { //value：表单的值、item：表单的DOM对象
                    if (!new RegExp("^[a-zA-Z0-9_\u4e00-\u9fa5\\s·]+$").test(value)) {
                        return '用户名不能有特殊字符';
                    }
                    if (/(^\_)|(\__)|(\_+$)/.test(value)) {
                        return '用户名首尾不能出现下划线\'_\'';
                    }
                    if (/^\d+\d+\d$/.test(value)) {
                        return '用户名不能全为数字';
                    }
                }

                //我们既支持上述函数式的方式，也支持下述数组的形式
                //数组的两个值分别代表：[正则匹配、匹配不符时的提示文字]
                  , pass: [
                    /^[\S]{6,12}$/
                    , '密码必须6到12位，且不能出现空格'
                  ]

                   , template: function (value,item) {
                       if (!value || value.length == 0)
                       {
                           return '模板信息，不能为空'
                       }

                   }
            });


            //监听提交
            form.on('submit(cateadd)', function (data) {

                //$(this).text()
               $.ajax({
                    type: "POST",
                    url: common.renderUrl('@Url.Action("Update", "Category")', {

                    }),
                    data: data.field,
                    dataType: "json",
                    beforeSend: function (xhr) {
                        layer.load(0);
                        //  xhr.setRequestHeader('Content-Type', 'multipart/form-data');
                    },
                    success: function (res) {
                        if (res.Code == 0) {
                            layer.msg("添加类目成功");
                        }
                        else {
                            layer.msg(res.ErrorDesc);
                        }
                        layer.closeAll("loading");
                    },

                    error: function (xmlHttpRequest, textStatus, errorThrown) {

                        layer.closeAll("loading");
                    }
                });


                return false;


                title: '最终的提交信息'




            });



        });


    </script>


}

